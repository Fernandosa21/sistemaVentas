[{"C:\\Users\\grana\\Documents\\GitHub\\sistemaVentas\\src\\index.js":"1","C:\\Users\\grana\\Documents\\GitHub\\sistemaVentas\\src\\App.js":"2","C:\\Users\\grana\\Documents\\GitHub\\sistemaVentas\\src\\reportWebVitals.js":"3","C:\\Users\\grana\\Documents\\GitHub\\sistemaVentas\\src\\components\\sales\\sales.js":"4","C:\\Users\\grana\\Documents\\GitHub\\sistemaVentas\\src\\components\\navBar\\navBar.js":"5","C:\\Users\\grana\\Documents\\GitHub\\sistemaVentas\\src\\components\\orders\\orders.js":"6","C:\\Users\\grana\\Documents\\GitHub\\sistemaVentas\\src\\services\\SaleService.js":"7","C:\\Users\\grana\\Documents\\GitHub\\sistemaVentas\\src\\services\\SaleDetailsService.js":"8","C:\\Users\\grana\\Documents\\GitHub\\sistemaVentas\\src\\components\\sales\\cutOff.js":"9","C:\\Users\\grana\\Documents\\GitHub\\sistemaVentas\\src\\services\\CutoffService.js":"10"},{"size":517,"mtime":1610502393965,"results":"11","hashOfConfig":"12"},{"size":872,"mtime":1611190247948,"results":"13","hashOfConfig":"12"},{"size":375,"mtime":1610502393970,"results":"14","hashOfConfig":"12"},{"size":2466,"mtime":1611278031280,"results":"15","hashOfConfig":"12"},{"size":796,"mtime":1610598048615,"results":"16","hashOfConfig":"12"},{"size":9138,"mtime":1611276475280,"results":"17","hashOfConfig":"12"},{"size":738,"mtime":1611278031296,"results":"18","hashOfConfig":"12"},{"size":218,"mtime":1611017554225,"results":"19","hashOfConfig":"12"},{"size":9072,"mtime":1611279332650,"results":"20","hashOfConfig":"12"},{"size":671,"mtime":1611278031292,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"f1f2f5",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"24"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"24"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\grana\\Documents\\GitHub\\sistemaVentas\\src\\index.js",[],["46","47"],"C:\\Users\\grana\\Documents\\GitHub\\sistemaVentas\\src\\App.js",[],"C:\\Users\\grana\\Documents\\GitHub\\sistemaVentas\\src\\reportWebVitals.js",[],"C:\\Users\\grana\\Documents\\GitHub\\sistemaVentas\\src\\components\\sales\\sales.js",["48"],"\r\nimport React, { useState, useEffect } from 'react';\r\nimport { getSales } from '../../services/SaleService'\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nconst Sales = () => {\r\n  useEffect(() => {\r\n    callApi();\r\n  },\r\n    []);\r\n\r\n  const Alert = (props) => {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\n\r\n  const handleAlert = (type, message) => {\r\n    setOpen(true);\r\n    setMessage(message)\r\n    setType(type)\r\n  }\r\n\r\n\r\n  const [sales, setSales] = useState([])\r\n  const totalDay = sales && sales.filter(({ pay_method }) => pay_method === 'Efectivo').reduce((acc, { amount }) => acc + amount, 0)\r\n  const [open, setOpen] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [type, setType] = useState(\"\");\r\n\r\n  const callApi = async () => {\r\n    try {\r\n      const responseSales = (await getSales()).sales;\r\n      setSales(responseSales)\r\n    }\r\n    catch (err) {\r\n      handleAlert(\"error\", \"Hubo un error al cargar las ventas\");\r\n    }\r\n  }\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  return (\r\n    <div className=\"col-12 p-0 d-flex justify-content-center\">\r\n      <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity={type}>\r\n          {message}\r\n        </Alert>\r\n      </Snackbar>\r\n      <div className=\"col-8 \">\r\n        <h1>Ventas de hoy</h1>\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"text-center\" scope=\"col\">#</th>\r\n              <th className=\"text-center\" scope=\"col\">Método de Pago</th>\r\n              <th className=\"text-center\" scope=\"col\">Total</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sales && sales.map((sale, index) => (\r\n              <tr key={index}>\r\n                <th className=\"text-center\" scope=\"row\">{sale.id_order}</th>\r\n                <td className=\"text-center\">{sale.pay_method}</td>\r\n                <td className=\"text-right\">{sale.amount.toFixed(2)}</td>\r\n              </tr>\r\n            ))}\r\n            <tr>\r\n              <th></th>\r\n              <td className=\"text-right\">Total</td>\r\n              <td className=\"text-right\">${totalDay}</td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sales;","C:\\Users\\grana\\Documents\\GitHub\\sistemaVentas\\src\\components\\navBar\\navBar.js",[],"C:\\Users\\grana\\Documents\\GitHub\\sistemaVentas\\src\\components\\orders\\orders.js",["49"],"import React, { useState, useEffect } from \"react\";\r\nimport { FiChevronRight, FiChevronLeft } from \"react-icons/fi\";\r\nimport { getSales, putSale } from '../../services/SaleService';\r\nimport { getSaleDetails } from '../../services/SaleDetailsService';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nconst Orders = () => {\r\n  useEffect(() => {\r\n    callApi();\r\n  },\r\n    []);\r\n\r\n  const Alert = (props) => {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n\r\n  const callApi = async () => {\r\n    try {\r\n      const sales = await getSales(true);\r\n      setOrders(sales.sales)\r\n    } catch (err) {\r\n      handleAlert(\"error\", \"Hubo un error de conexión\")\r\n    }\r\n  }\r\n\r\n  const handleAlert = (type, message) => {\r\n    setOpen(true);\r\n    setMessage(message)\r\n    setType(type)\r\n  }\r\n\r\n  const [details, setDetails] = useState(false);\r\n  const [selectedOrder, setSelectedOrder] = useState();\r\n  const [orders, setOrders] = useState([]);\r\n  const [selectedMethod, setSelectedMethod] = useState(\"\");\r\n  const [cash, setCash] = useState(0);\r\n  const [change, setChange] = useState(0);\r\n  const [card, setCard] = useState(\"\");\r\n  const [nip, setNip] = useState(\"\");\r\n  const [open, setOpen] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [type, setType] = useState(\"\");\r\n\r\n  const selectOrder = async (order) => {\r\n    try {\r\n      const saleDetails = await getSaleDetails(order.id_sale);\r\n      const currentOrder = {\r\n        ...order,\r\n        products: saleDetails.saleDetails\r\n      }\r\n      setSelectedOrder(currentOrder)\r\n      setDetails(true);\r\n    } catch (err) {\r\n      setOpen(true);\r\n      setMessage(\"Hubo un error de conexión\")\r\n      setType(\"error\")\r\n    }\r\n  }\r\n\r\n  const calculateTotal = () => {\r\n    const total = selectedOrder.products.reduce((acc, item) => acc + (item.price * item.quantity), 0)\r\n    return total.toFixed(2)\r\n  }\r\n\r\n  const calculateChange = () => {\r\n    console.log(calculateTotal());\r\n    const total = calculateTotal();\r\n    if (parseFloat(cash) < total) {\r\n      handleAlert(\"error\", \"El monto en efectivo debe ser mayor que el total de la orden\");\r\n    }\r\n    else {\r\n      setChange((cash - total).toFixed(2))\r\n    }\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    switch (event.target.name) {\r\n      case 'cash':\r\n        setCash(event.target.value);\r\n        break;\r\n      case 'card':\r\n        setCard(event.target.value);\r\n        break;\r\n      case 'nip':\r\n        setNip(event.target.value);\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setOpen(false);\r\n  };\r\n\r\n  const pay = async () => {\r\n    if ((selectedMethod === 'Efectivo' && cash === \"\") || (selectedMethod === \"Tarjeta\" && (card === \"\" || nip === \"\"))) {\r\n      handleAlert(\"error\", \"No debe haber campos vacios\");\r\n    }\r\n    else {\r\n      try{\r\n        const response = await putSale(selectedOrder.id_order, selectedMethod, card, nip);\r\n        if(!response.success)\r\n          throw('Algo salio mal');\r\n        goBack();\r\n        handleAlert(\"success\", \"El pago se aplico con exito\");\r\n      }\r\n      catch(err){\r\n        handleAlert(\"error\", \"Hubo un error al registrar el pago\");\r\n      }\r\n    }\r\n\r\n  }\r\n\r\n  const renderOrders = () => {\r\n    return (\r\n      <div className=\"col-8 \">\r\n        <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n          <Alert onClose={handleClose} severity={type}>\r\n            {message}\r\n          </Alert>\r\n        </Snackbar>\r\n        <h1>Ordenes</h1>\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"text-center\" scope=\"col\">#</th>\r\n              <th></th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {orders.map((order, index) => (\r\n              <tr key={index}>\r\n                <th className=\"text-center\" scope=\"row\">{order.id_order}</th>\r\n                <td className=\"text-right\">\r\n                  <button type=\"button\" class=\"btn btn-link\" onClick={() => selectOrder(order)}>\r\n                    <FiChevronRight />\r\n                  </button>\r\n                </td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const goBack = () => {\r\n    callApi()\r\n    setDetails(false);\r\n    setCash(\"\");\r\n    setChange(0);\r\n    setCard(\"\");\r\n    setNip(\"\");\r\n    setSelectedMethod(\"\");\r\n    setSelectedOrder({})\r\n  }\r\n\r\n  const renderOrderDetail = () => {\r\n    return (\r\n      <div className=\"col-8 \">\r\n        <Snackbar open={open} autoHideDuration={6000} onClose={handleClose}>\r\n          <Alert onClose={handleClose} severity={type}>\r\n            {message}\r\n          </Alert>\r\n        </Snackbar>\r\n        <h1>Detallas de Ordenes</h1>\r\n        <div className=\"col-8\">\r\n          <button type=\"button\" class=\"btn btn-link\" onClick={() => goBack()}>\r\n            <FiChevronLeft />\r\n            <text>Atras</text>\r\n          </button>\r\n        </div>\r\n        <div className=\"col-8 row\">\r\n          <text>Orden Numero:</text>\r\n          <text> {selectedOrder.id_order}</text>\r\n        </div>\r\n        <table className=\"table\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"text-center\" scope=\"col\">Cantidad</th>\r\n              <th className=\"text-center\" scope=\"col\">Producto</th>\r\n              <th className=\"text-center\" scope=\"col\">Precio</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {selectedOrder.products.map((product, index) => (\r\n              <tr key={index}>\r\n                <td className=\"text-center\">{product.quantity}</td>\r\n                <td className=\"text-center\">{product.name}</td>\r\n                <td className=\"text-center\">{product.price}</td>\r\n              </tr>\r\n            ))}\r\n            <td className=\"text-center\"></td>\r\n            <th className=\"text-center\">Total</th>\r\n            <td className=\"text-center\">{calculateTotal()}</td>\r\n          </tbody>\r\n        </table>\r\n        <div className=\"row d-flex justify-content-end\">\r\n          <h5 className=\"text-right m-5\">Metodo de Pago</h5>\r\n          <div className=\"text-right m-5\">\r\n            <button type=\"button\" class=\"btn btn-outline-info btn-lg\" onClick={() => setSelectedMethod('Efectivo')}>Efectivo</button>\r\n          </div>\r\n          <div className=\"text-right m-5\">\r\n            <button type=\"button\" class=\"btn btn-outline-info btn-lg\" onClick={() => setSelectedMethod('Tarjeta')}>Tarjeta</button>\r\n          </div>\r\n        </div>\r\n        {selectedMethod !== \"\" ?\r\n          renderMethods()\r\n          : null\r\n        }\r\n      </div>\r\n    )\r\n  }\r\n\r\n  const renderMethods = () => {\r\n    return (\r\n      <div>\r\n        { selectedMethod === 'Efectivo' ?\r\n          <div>\r\n            <h5>Pago en Efectivo</h5>\r\n            <text>Ingresa los datos correspondientes</text>\r\n            <div className=\"row d-flex justify-content-between mt-4 mb-4\">\r\n              <div class=\"d-flex justify-content-between ml-3\">\r\n                <text className=\"font-weight-bold mr-3\">Monto</text>\r\n                <input type=\"text\" name=\"cash\" value={cash} onChange={handleChange} class=\"form-control\" />\r\n              </div>\r\n              <div className=\"text-right\">\r\n                <button type=\"button\" class=\"btn btn-outline-info btn-lg\" onClick={() => calculateChange()}>Calcular</button>\r\n              </div>\r\n            </div>\r\n            {change !== 0                    ?\r\n              <div className=\"row\">\r\n                <div class=\"d-flex justify-content-between m-3\">\r\n                  <text className=\"font-weight-bold mr-3\">Cambio</text>\r\n                  <input type=\"text\" name=\"change\" value={change} class=\"form-control\" disabled />\r\n                </div>\r\n              </div>\r\n              : null}\r\n          </div>\r\n          :\r\n          <div>\r\n            <h5>Pago con Tarjeta</h5>\r\n            <text>Ingresa los datos correspondientes</text>\r\n            <div className=\"row d-flex justify-content-between mt-4 mb-4\">\r\n              <div class=\"d-flex justify-content-between m-3 col\">\r\n                <text className=\"font-weight-bold mr-3\">Numero de tarjeta</text>\r\n                <input type=\"text\" name=\"card\" value={card} onChange={handleChange} class=\"form-control\" />\r\n              </div>\r\n              <div class=\"d-flex justify-content-between m-3 col\">\r\n                <text className=\"font-weight-bold mr-3\">Nip</text>\r\n                <input type=\"password\" name=\"nip\" value={nip} onChange={handleChange} class=\"form-control\" />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        }\r\n        <div className=\"text-right m-3\">\r\n          <button type=\"button\" class=\"btn btn-info btn-lg\" onClick={() => pay()}>Pagar</button>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"col-12 p-0 d-flex justify-content-center\">\r\n      {!details ?\r\n        renderOrders()\r\n        :\r\n        renderOrderDetail()\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Orders;","C:\\Users\\grana\\Documents\\GitHub\\sistemaVentas\\src\\services\\SaleService.js",[],"C:\\Users\\grana\\Documents\\GitHub\\sistemaVentas\\src\\services\\SaleDetailsService.js",[],"C:\\Users\\grana\\Documents\\GitHub\\sistemaVentas\\src\\components\\sales\\cutOff.js",["50","51"],"import React, { useState, useEffect } from 'react';\r\nimport moment from 'moment';\r\nimport 'moment/locale/es-mx'\r\nimport { getCutoffs, putCutoff } from '../../services/CutoffService'\r\nimport { getSales, getSalesByCutoff } from '../../services/SaleService'\r\nimport styles from '../styles.module.css';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\nimport { FiChevronDown } from \"react-icons/fi\";\r\n\r\nconst CutOff = () => {\r\n  useEffect(() => {\r\n    callApi();\r\n  }, []);\r\n\r\n  const Alert = (props) => {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n  }\r\n  const handleAlert = (type, message) => {\r\n    setShowAlert(true);\r\n    setMessage(message)\r\n    setType(type)\r\n  }\r\n\r\n  moment.locale('es');\r\n\r\n  const [openCutoff, setOpenCutoff] = useState({})\r\n  const [closedCutoff, setClosedCutoff] = useState([])\r\n  const [sales, setSales] = useState([])\r\n  const cash = sales && sales.filter(sale => sale.pay_method === 'Efectivo')\r\n  const totalCash = cash && cash.reduce((acc, { amount }) => acc + amount, 0)\r\n  const totalDay = sales && sales.reduce((acc, { amount }) => acc + amount, 0)\r\n  const [casher, setCasher] = useState(\"\");\r\n  const [initialAmount, setInitialAmount] = useState(\"\");\r\n  const [showAlert, setShowAlert] = useState(false);\r\n  const [message, setMessage] = useState(\"\");\r\n  const [type, setType] = useState(\"\");\r\n\r\n  const callApi = async () => {\r\n    try {\r\n      const response = (await getCutoffs()).cutOffs;\r\n      const open = response.filter(item => item.status === 'opened')[0];\r\n      const closed = response.filter(item => item.status === 'closed');\r\n      const responseSales = (await getSales()).sales;\r\n      setOpenCutoff(open)\r\n      setClosedCutoff(closed)\r\n      setSales(responseSales)\r\n    }\r\n    catch (err) {\r\n      handleAlert(\"error\", \"Algo salió mal\")\r\n    }\r\n  }\r\n\r\n  const handleChange = (event) => {\r\n    const isValid = event.target.validity.valid;\r\n    switch (event.target.name) {\r\n      case 'casher':\r\n        setCasher(event.target.value);\r\n        break;\r\n      case 'initialAmount':\r\n        if (isValid) {\r\n          setInitialAmount(event.target.value);\r\n        }\r\n        else {\r\n          handleAlert(\"error\", \"Introducir solo números.\");\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  const handleClose = (event, reason) => {\r\n    if (reason === 'clickaway') {\r\n      return;\r\n    }\r\n    setShowAlert(false);\r\n  };\r\n\r\n  const register = async () => {\r\n    if (casher !== \"\" && initialAmount !== \"\") {\r\n      try {\r\n        const response = await putCutoff(\r\n          openCutoff.id_cutoff,\r\n          casher,\r\n          parseFloat(initialAmount).toFixed(2),\r\n          totalDay.toFixed(2),\r\n          totalCash.toFixed(2),\r\n          sales.length)\r\n        if (!response.success)\r\n          throw ('Algo salio mal');\r\n        callApi()\r\n        handleAlert(\"success\", \"El corte de venta se registro correctamente\");\r\n      } catch (err) {\r\n        console.log(err)\r\n        handleAlert(\"error\", \"Algo salió mal\")\r\n      }\r\n    } else {\r\n      handleAlert(\"error\", \"Debe llenar todos los datos\")\r\n    }\r\n  }\r\n\r\n  const showSales = async (index, value, id_cutoff) => {\r\n    try {\r\n      const response = (await getSalesByCutoff(id_cutoff)).sales;\r\n      const closedTemp = [...closedCutoff];\r\n      closedTemp[index].sales = response;\r\n      closedTemp[index].showSales = value;\r\n      setClosedCutoff(closedTemp)\r\n    }\r\n    catch (err) {\r\n      handleAlert(\"error\", \"Algo salió mal\")\r\n    }\r\n  }\r\n\r\n  const buildCutoff = (item, index, open) => (\r\n    <div key={index}>\r\n      <div className=\"row mt-3 border rounded\">\r\n        <div class=\"col mt-2 mb-2\">\r\n          <div class=\"d-flex justify-content-between pr-2 ml-3\">\r\n            <text className=\"font-weight-bold\">Fecha</text>\r\n            <text> {moment(item.oppened_hour).format('DD/MMMM/YYYY')}</text>\r\n          </div>\r\n          <div class=\"d-flex justify-content-between pr-2 ml-3\">\r\n            <text className=\"font-weight-bold\">Hora de Apertura</text>\r\n            <text> {moment(item.oppened_hour).format('hh:mm a')}</text>\r\n          </div>\r\n          <div class=\"d-flex justify-content-between pr-2 ml-3\">\r\n            <text className=\"font-weight-bold\">Hora de Cierre</text>\r\n            <text> {moment(item.closed_hour).format('hh:mm a')}</text>\r\n          </div>\r\n          <div class=\"d-flex justify-content-between pr-2 ml-3\">\r\n            <text className=\"font-weight-bold\">Cajero / Operador</text>\r\n            {open ?\r\n              <input type=\"text\" name=\"casher\" value={casher} onChange={handleChange} className={styles.input} />\r\n              :\r\n              <text>{item.user_name}</text>\r\n            }\r\n          </div>\r\n        </div>\r\n        <div class=\"col mt-2 mb-2\">\r\n          <div class=\"d-flex justify-content-between pr-2 ml-3\">\r\n            <text className=\"font-weight-bold\">Cantidad Inicial</text>\r\n            {open ?\r\n              <input\r\n                type=\"text\"\r\n                size=\"sm\"\r\n                name=\"initialAmount\"\r\n                value={initialAmount}\r\n                onChange={handleChange}\r\n                className={styles.input}\r\n                pattern=\"^(\\d|-)?(\\d|,)*\\.?\\d*$\" />\r\n              :\r\n              <text> ${item.initial_amount.toFixed(2) || '0.00'}</text>\r\n            }\r\n          </div>\r\n          <div class=\"d-flex justify-content-between pr-2 ml-3\">\r\n            <text className=\"font-weight-bold\">Total</text>\r\n            <text> ${open ? totalDay.toFixed(2) : (item.income || 0).toFixed(2)}</text>\r\n          </div>\r\n          <div class=\"d-flex justify-content-between pr-2 ml-3\">\r\n            <text className=\"font-weight-bold\">Total a entregar</text>\r\n            <text> ${open ? totalCash.toFixed(2) : (item.total_income).toFixed(2)}</text>\r\n          </div>\r\n        </div>\r\n        <div class=\"col mt-2 mb-2\">\r\n          <div class=\"d-flex justify-content-between pr-2 ml-3\">\r\n            <text className=\"font-weight-bold\">Cobros Realizados</text>\r\n            <text> {open ? sales.length : (item.transactions_quantity || 0)}</text>\r\n          </div>\r\n        </div>\r\n        {!open ?\r\n          <div>\r\n            <button type=\"button\" class=\"btn btn-link\" onClick={() => showSales(index, !item.showSales, item.id_cutoff)}>\r\n              <FiChevronDown />\r\n            </button>\r\n          </div>\r\n          :\r\n          null}\r\n      </div>\r\n      {item.showSales && !open ?\r\n        renderMoves(item.sales || [])\r\n        :\r\n        null\r\n      }\r\n    </div>\r\n\r\n  )\r\n\r\n  const renderMoves = (specificSales) => {\r\n    return (\r\n      <div>\r\n        <table className=\"table mt-5\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"text-center\" scope=\"col\">#</th>\r\n              <th className=\"text-center\" scope=\"col\">Método de Pago</th>\r\n              <th className=\"text-center\" scope=\"col\">Total</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {specificSales.map((sale, index) => (\r\n              <tr key={index}>\r\n                <th className=\"text-center\" scope=\"row\">{sale.id_order}</th>\r\n                <td className=\"text-center\">{sale.pay_method}</td>\r\n                <td className=\"text-right\">{sale.amount.toFixed(2)}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"col-12 p-0 d-flex justify-content-center row\">\r\n      <Snackbar open={showAlert} autoHideDuration={6000} onClose={handleClose}>\r\n        <Alert onClose={handleClose} severity={type}>\r\n          {message}\r\n        </Alert>\r\n      </Snackbar>\r\n      {openCutoff && <div className=\"col-8 \">\r\n        <h1>Corte de Caja</h1>\r\n        {buildCutoff(openCutoff, 0, true)}\r\n        <table className=\"table mt-5\">\r\n          <thead>\r\n            <tr>\r\n              <th className=\"text-center\" scope=\"col\">#</th>\r\n              <th className=\"text-center\" scope=\"col\">Método de Pago</th>\r\n              <th className=\"text-center\" scope=\"col\">Total</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {sales.map((sale, index) => (\r\n              <tr key={index}>\r\n                <th className=\"text-center\" scope=\"row\">{sale.id_order}</th>\r\n                <td className=\"text-center\">{sale.pay_method}</td>\r\n                <td className=\"text-right\">{sale.amount.toFixed(2)}</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n        <div className=\"text-right\">\r\n          <button type=\"button\" class=\"btn btn-info\" onClick={() => register()}>Registrar</button>\r\n        </div>\r\n      </div>}\r\n      <div className=\"col-8 \">\r\n        <h3>Historial</h3>\r\n        {closedCutoff.sort((a, b) => {\r\n          if (a.closed_hour > b.closed_hour)\r\n            return -1;\r\n          else if (a.closed_hour < b.closed_hour)\r\n            return 1;\r\n          return 0;\r\n\r\n        }).map((item, index) => buildCutoff(item, index))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CutOff;","C:\\Users\\grana\\Documents\\GitHub\\sistemaVentas\\src\\services\\CutoffService.js",[],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":11,"column":5,"nodeType":"58","endLine":11,"endColumn":7,"suggestions":"59"},{"ruleId":"56","severity":1,"message":"57","line":12,"column":5,"nodeType":"58","endLine":12,"endColumn":7,"suggestions":"60"},{"ruleId":"56","severity":1,"message":"57","line":14,"column":6,"nodeType":"58","endLine":14,"endColumn":8,"suggestions":"61"},{"ruleId":"62","severity":1,"message":"63","line":91,"column":11,"nodeType":"64","messageId":"65","endLine":91,"endColumn":36},"no-native-reassign",["66"],"no-negated-in-lhs",["67"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'callApi'. Either include it or remove the dependency array.","ArrayExpression",["68"],["69"],["70"],"no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","no-global-assign","no-unsafe-negation",{"desc":"71","fix":"72"},{"desc":"71","fix":"73"},{"desc":"71","fix":"74"},"Update the dependencies array to be: [callApi]",{"range":"75","text":"76"},{"range":"77","text":"76"},{"range":"78","text":"76"},[282,284],"[callApi]",[425,427],[517,519]]